?help
?data
x <- c(0.18, -1.54, 0.42, 0.95)
x <- c(0.18, -1.54, 0.42, 0.95)
library(manipulate)
myhist <- function(mu){
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- x*w
hist(x,breaks=10)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- (mean(y-mu)^2)
text(63,150,paste("mu=", mu))
test(63,140, paste("MSE=", round(mse,2)))
}
manipulate(myhist(mu), mu=slider(-1,1,step=0.05))
myhist <- function(mu){
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- x*w
hist(y)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- (mean(y-mu)^2)
text(63,150,paste("mu=", mu))
test(63,140, paste("MSE=", round(mse,2)))
}
manipulate(myhist(mu), mu=slider(-1,1,step=0.05))
x
w
w <- c(2, 1, 3, 1)
y <- x*w
hist(y)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
lines(c(-1,-1), c(0,150), col="red", lwd=5)
mse <- (mean(y+1)^2)
text(63,150,paste("mu=", mu))
text(63,150,paste("mu=", -1))
test(63,140, paste("MSE=", round(mse,2)))
test(63,140, paste("MSE=", round(mse,2)))
text(10,20,paste("mu=", -1))
text(50,50,paste("mu=", -1))
myhist <- function(mu){
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- x*w
hist(y)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- (mean(y-mu)^2)
text(63,150,paste("mu=", mu))
text(63,140, paste("MSE=", round(mse,2)))
}
myhist(-1)
manipulate(myhist(mu), mu=slider(-1,1,step=0.05))
manipulate(myhist(mu), mu=slider(-1,1,step=0.05))
manipulate(myhist(mu), mu=slider(-1,1,step=0.05))
myhist <- function(mu){
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- x*w
hist(y)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- (mean(y-mu)^2)
text(63,150,paste("mqu=", mu))
text(63,140, paste("MSE=", round(mse,2)))
}
manipulate(myhist(mu), mu=slider(-1,1,step=0.05))
manipulate(myhist(mu), mu=slider(-1,1,step=0.05))
myhist <- function(mu){
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- x*w
hist(y)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- (mean(y-mu)^2)
text(10,20,paste("mqu=", mu))
text(10,30, paste("MSE=", round(mse,2)))
}
manipulate(myhist(mu), mu=slider(-1,1,step=0.05))
?text
myhist <- function(mu){
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- x*w
hist(y)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- (mean(y-mu)^2)
text(50,50,paste("mqu=", mu))
text(50,50, paste("MSE=", round(mse,2)))
}
manipulate(myhist(mu), mu=slider(-1,1,step=0.05))
myhist <- function(mu){
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- x*w
hist(y)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- (mean(y-mu)^2)
text(-2,2,paste("mqu=", mu))
text(-2,1, paste("MSE=", round(mse,2)))
}
manipulate(myhist(mu), mu=slider(-1,1,step=0.05))
myhist <- function(mu){
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- x*w
hist(y)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- (mean(y-mu)^2)
text(-2,2,paste("mqu=", mu))
text(-2,1.5, paste("MSE=", round(mse,2)))
}
manipulate(myhist(mu), mu=slider(-1,1,step=0.05))
myhist <- function(mu){
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- x*w
hist(y)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- (mean(y-mu)^2)
text(-1.7,2,paste("mqu=", mu))
text(-1.7,1.5, paste("MSE=", round(mse,2)))
}
manipulate(myhist(mu), mu=slider(-1,1,step=0.05))
myhist <- function(mu){
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- x*w
hist(y)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- (mean(y-mu)^2)
text(-1.7,2,paste("mqu=", mu))
text(-1.7,1.5, paste("MSE=", round(mse,4)))
}
manipulate(myhist(mu), mu=slider(-1,1,step=0.05))
manipulate(myhist(mu), mu=slider(-1,1,step=0.005))
myhist <- function(mu){
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- x*w
hist(y)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- (mean(w*(x-mu)^2)
text(-1.7,2,paste("mqu=", mu))
text(-1.7,1.5, paste("MSE=", round(mse,4)))
}
myhist <- function(mu){
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- x*w
hist(y)
lines(c(mu,mu), c(0,150), col="red", lwd=5)
mse <- mean((w*(x-mu)^2))
text(-1.7,2,paste("mqu=", mu))
text(-1.7,1.5, paste("MSE=", round(mse,4)))
}
manipulate(myhist(mu), mu=slider(-1,1,step=0.005))
myplot <- function(beta)
{
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
xmean <- x - mean(x)
ymean <- y-mean(y)
freqdata <- as.data.frame(table(xmean, ymean))
names(freqdata) <- c("x", "y", "freq")
plot(freqdata$x, freqdata$y, pch=21)
}
myplot(1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
xmean <- x - mean(x)
ymean <- y-mean(y)
freqdata <- as.data.frame(table(xmean, ymean))
freqdata
plot(freqdata$x, freqdata$y, pch=21, type="pt")
?plot
plot(freqdata$x, freqdata$y, pch=21, type="p")
plot(freqdata$x, freqdata$y, pch=21, type="pt")
abline(0,beta,lwd=3)
points(0,0,cex=2, pch=19)
mse <- mean((y- beta*x)^2)
title(paste("beta = ", beta, "mse = ", round(mse,3)))
myplot <- function(beta)
{
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
xmean <- x - mean(x)
ymean <- y-mean(y)
freqdata <- as.data.frame(table(xmean, ymean))
names(freqdata) <- c("x", "y", "freq")
plot(freqdata$x, freqdata$y, pch=21, type="pt")
abline(0,beta,lwd=3)
points(0,0,cex=2, pch=19)
mse <- mean((y- beta*x)^2)
title(paste("beta = ", beta, "mse = ", round(mse,3)))
}
myplot <- function(beta)
{
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
xmean <- x - mean(x)
ymean <- y-mean(y)
freqdata <- as.data.frame(table(xmean, ymean))
names(freqdata) <- c("x", "y", "freq")
plot(freqdata$x, freqdata$y, pch=21, type="p")
abline(0,beta,lwd=3)
points(0,0,cex=2, pch=19)
mse <- mean((y- beta*x)^2)
title(paste("beta = ", beta, "mse = ", round(mse,3)))
}
manipulate(myplot(beta), beta=slider(0.8,1.2,step=0.02))
manipulate(myplot(beta), beta=slider(0.1,0.9,step=0.002))
manipulate(myplot(beta), beta=slider(0.1,0.9,step=0.002))
manipulate(myplot(beta), beta=slider(0.7,0.9,step=0.002))
?i
?I()
lm(I(child-mean(child))~I(parent-mean(parent))-1,data=galton)
library(UsingR)
data(galton)
lm(I(child-mean(child))~I(parent-mean(parent))-1,data=galton)
data(mpg)
data(mtcars)
str(mtcars)
y <- mtcars$mpg - mean(mtcars$mpg)
x <- mtcars$weight - mean(mtcars$weight)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("mpg", "weight", "freq")
freqData$mpg <- as.numeric(as.character(freqData$mpg))
freqData$weight <- as.numeric(as.character(freqData$weight))
y <- mtcars$mpg - mean(mtcars$mpg)
x <- mtcars$weight - mean(mtcars$weight)
freqData <- as.data.frame(table(x, y))
y
x
x <- mtcars$wt - mean(mtcars$wt)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("mpg", "weight", "freq")
freqData$mpg <- as.numeric(as.character(freqData$mpg))
freqData$weight <- as.numeric(as.character(freqData$wt))
freqData$weight <- as.numeric(as.character(freqData$weight))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = weight, y = mpg))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
library(ggplot2)
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
freqData
beta=0.1
g <- ggplot(filter(freqData, freq > 0), aes(x = weight, y = mpg))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
?filter
names(freqData)
names(freqData)
g <- ggplot(filter(freqData, freq > 0), aes(x = weight, y = mpg))
freqData
g <- ggplot(filter(freqData, freq = 0), aes(x = weight, y = mpg))
g <- ggplot(filter(freqData, freq == 0), aes(x = weight, y = mpg))
g <- ggplot(freqData, aes(x = weight, y = mpg))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
myPlot <- function(beta, f){
g <- ggplot(freqData, aes(x = weight, y = mpg))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
lm(I(mtcars$mpg-mean(mtcars$mpg))~I(mtcars$wt-mean(mtcars$wt))-1)
lm(I(mtcars$mpg-mean(mtcars$mpg))~I(mtcars$wt-mean(mtcars$wt)))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
#manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
library(manioulate)
library(manipulate)
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
library(UsingR)
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
require(devtools)
library(devtools)
install.packages(devtools)
install.packages("devtools")
install_github('ramnathv/rCharts')
library(devtools)
install_github('ramnathv/rCharts')
require(rCharts)
haireye <- as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group='Eye', type= 'multiBarChart', data=subset(haireye, sex='Male'))
n1$save('fig/n1.html', cdn=TRUE)
n1
nPlot(Freq ~ Hair, group='Eye', type= 'multiBarChart', data=subset(haireye, sex='Male'))
> n1$save('fig/n1.html', cdn=TRUE)
nPlot(Freq ~ Hair, group='Eye', type= 'multiBarChart', data=subset(haireye, sex='Male'))
n1 <- nPlot(Freq ~ Hair, group='Eye', type= 'multiBarChart', data=subset(haireye, sex=='Male'))
n1 <- nPlot(Freq ~ Hair, group='Eye', type= 'multiBarChart', data=subset(haireye, Sex=='Male'))
nPlot(Freq ~ Hair, group='Eye', type= 'multiBarChart', data=subset(haireye, Sex=='Male'))
x <- 1:20
y <- rnorm(20)
plot(x,y)
@
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
set.seed(12345)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
getwd()
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
corr(myTraining)
cor(myTraining)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
myNZVvars <- names(myTraining) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
myTraining <- myTraining[!myNZVvars]
#To check the new N?? of observations
dim(myTraining)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
myDataNZV
names(myDataNZV)
q()
install.packages("Rcpp")
library(Rcpp)
install.packages("Rcpp")
remove.packages("Rcpp")
install.packages("Rcpp")
.libpaths()
.libPaths()
library(Rcpp)
shinyapps::deployApp("E:/Data/Sarada/Coursera/DevelopingDataProducts/Project")
runApp()
setwd("E:/Data/Sarada/Coursera/DevelopingDataProducts/Project")
runApp()
library(shiny)
runApp()
runApp()
shinyapps::deployApp("E:/Data/Sarada/Coursera/DevelopingDataProducts/Project")
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
library(slidify)
setwd("E:/Data/Sarada/Coursera/DevelopingDataProducts/Project/slidify")
author("DPP_Project")
